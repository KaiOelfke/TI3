2. Aufgabe

Bei einem Desktoprechner gibt es in der Regel einen Benutzer, der viele
Programme (Internet, Musik, Textverarbeitung) "gleichzeitig" benutzen
moechte und deswegen muss Multitasking moeglichst fluessig laufen. Dafuer
ist es wichtig, dass Prozesse oft genug gewechselt werden, um sicherzugehen, dass jeder Prozess auch genug Rechenzeit bekommt und die Musik beispielsweise nicht kurz pausiert. 

=> Ausreichend viele Wechsel (z.B. Round Robin)

Bei einem Server gibt es viele Anfragen und diese muessen moeglichst
schnell bearbeitet werden. Hier sollten wenig Prozesswechsel stattfinden, da Wechsel kostenintensiv sind und die Bearbeitung verlangsamen. Es sollte
also versucht werden eine Abfrage zunaechst zu beenden und dann die naechste zu bearbeiten. Natuerlich muss garantiert werden, dass ein sehr langer Prozess nicht den Server fuer sehr lange Zeit blockiert. In der Regel haben, aber die Anfragen nur kurze Bearbeitungszeiten.

=> Minimal viele Wechsel (z.B. FCFS)

3. Realtime Scheduler

Realtimesysteme haben die Anforderung Operationen in einem gegebenen Zeitrahmen stets abzuschlieÃŸen. Es muss also garantiert werden, dass
definierte Deadlines eingehalten werden, weil sonst ein Systemfehler (hard realtime system) bzw. andere Nachteile (soft realtime system) auftreten. D.h. der scheduling Algorithmus muss garantieren, dass der Prozess mit der naehesten Deadline abgearbeitet wird und bei Deadlineaenderungen muessen Prozesse gewechselt werden. Es ist meistens Aufgabe des Programmierers die Prozesse bzw. Deadlines so zu gestalten, dass eine Abarbeitung moeglich ist mit dem vorhandenen System.